using Com.ACSCorp.Accelerator.ApplicationAnalyzer.Common;
using Com.ACSCorp.Accelerator.ApplicationAnalyzer.IRepository;
using Com.ACSCorp.Accelerator.ApplicationAnalyzer.Models;
using Com.ACSCorp.Accelerator.ApplicationAnalyzer.Models.DTO;
using Com.ACSCorp.Accelerator.ApplicationAnalyzer.Repository.Context;
using Com.ACSCorp.Accelerator.ApplicationAnalyzer.Repository.Mapper;
using Com.ACSCorp.Accelerator.ApplicationAnalyzer.Repository.Models;
using Com.ACSCorp.Accelerator.Core.Models;
using Com.ACSCorp.Accelerator.Core.Repository.BaseRepository;

using Microsoft.EntityFrameworkCore;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace Com.ACSCorp.Accelerator.ApplicationAnalyzer.Repository
{
    public class VulnerabilityStatisticsRepository : BaseRepository<VulnerabilityStatistics>, IVulnerabilityStatisticsRepository
    {
        #region Constructors

        public VulnerabilityStatisticsRepository(ApplicationAnalyzerContext dbContext) : base(dbContext)
        {
        }

        #endregion Constructors

        #region Public Methods

        public async Task<bool> SaveVulnerabilityStatisticsAsync(List<VulnerabilityStatisticsDTO> vulnerabilityStatistics)
        {
            await AddRangeAsync(vulnerabilityStatistics.ToVulnerabilityStatisticsList());

            return true;
        }

        public async Task<List<ListItem<int>>> GetVulnerabilitiesBySeverityAsync(DashboardRequest dashboardRequest)
        {
            var query = GetAllVulnerabilities(dashboardRequest);

            List<ListItem<int>> vulnerabilitiesBySeverityList = await query
                .GroupBy(c => c.Severity)
                .Select(c => new ListItem<int>
                {
                    Text = c.Key,
                    Value = c.Sum(vs => vs.Value)
                })
                .OrderBy(s => s.Text)
                .ToListAsync();

            return vulnerabilitiesBySeverityList;
        }

        public async Task<List<ProjectSeverityVulnerabilityModel>> GetVulnerabilitiesBySeverityAsync(DashboardRequest dashboardRequest, IEnumerable<int> projectIds = null)
        {
            var query = GetAllVulnerabilities(dashboardRequest);

            if (projectIds != null && projectIds.Count() > 0)
            {
                query = query.Where(c => projectIds.Contains(c.ProjectId));
            }

            List<ProjectSeverityVulnerabilityModel> projectSeverityVulnerabilities = await query
                .GroupBy(c => new { c.ProjectId, c.Severity })
                .Select(c => new ProjectSeverityVulnerabilityModel
                {
                    Id = c.Key.ProjectId,
                    Severity = c.Key.Severity,
                    Vulnerabilities = c.Sum(vs => vs.Value)
                })
                .ToListAsync();

            return projectSeverityVulnerabilities;
        }

        public async Task<List<ListItem<int>>> GetVulnerabilitiesByTypeAsync(DashboardRequest dashboardRequest)
        {
            var query = GetAllVulnerabilities(dashboardRequest);
            List<ListItem<int>> vulnerabilitiesByTypeList = await query
                .Where(FilterInvalidIssueTypes())
                .GroupBy(c => c.Type)
                .OrderByDescending(c => c.Sum(vs => vs.Value))
                .Take(10)
                .Select(c => new ListItem<int>
                {
                    Text = c.Key,
                    Value = c.Sum(vs => vs.Value)
                })
                .ToListAsync();

            return vulnerabilitiesByTypeList;
        }

        public async Task<DateTime?> GetLastScannedOnAsync(DashboardRequest dashboardRequest)
        {
            var query = GetAllVulnerabilities(dashboardRequest);
            var lastScannedDate = await query
                .OrderByDescending(c => c.ScanDate)
                .FirstOrDefaultAsync();

            return lastScannedDate?.ScanDate;
        }

        public async Task<List<RecentScanDTO>> GetRecentScansAsync(DashboardRequest dashboardRequest)
        {
            var query = GetAllVulnerabilities(dashboardRequest)
                .Include(c => c.Project);

            var projectRecentScansList = await query
                .GroupBy(c => new
                {
                    c.ProjectId,
                    c.ScanTypeId,
                    c.ScanDate,
                    c.Project.Name,
                    c.ScanId
                })
                .OrderByDescending(c => c.Key.ScanDate)
                .Take(5)
                .Select(c => new RecentScanDTO
                {
                    ProjectId = c.Key.ProjectId,
                    ScanTypeId = c.Key.ScanTypeId,
                    ScanDate = c.Key.ScanDate,
                    ProjectName = c.Key.Name,
                    ScanId = c.Key.ScanId
                })
                .ToListAsync();

            return projectRecentScansList;
        }

        public async Task<int> GetScansCompletedAsync(DashboardRequest dashboardRequest)
        {
            var query = GetAllVulnerabilities(dashboardRequest);
            int scansCompleted = await query.CountAsync();

            return scansCompleted;
        }

        public async Task<List<VulnerabilityTrendDTO>> GetVulnerabilityTrendAsync(DashboardRequest dashboardRequest)
        {
            DateTime startDate = dashboardRequest.StartDate ?? DateTime.Now;

            if (dashboardRequest.VulnerabilityTrendPeriod == 0)
            {
                dashboardRequest.VulnerabilityTrendPeriod = Constant.DefaultVulnerabilityTrendPeriod;
            }

            var query = GetAllVulnerabilities(dashboardRequest)
                .Where(c => c.ScanDate >= startDate.Date.AddDays(-dashboardRequest.VulnerabilityTrendPeriod));

            List<VulnerabilityTrendDTO> vulnerablityTrendList = await query
                .GroupBy(c => new
                {
                    c.Severity,
                    c.ScanDate
                })
                .Select(c => new VulnerabilityTrendDTO
                {
                    Severity = c.Key.Severity,
                    Value = c.Sum(vs => vs.Value),
                    ScanDate = c.Key.ScanDate.Date
                })
                .ToListAsync();

            return vulnerablityTrendList;
        }

        #endregion Public Methods

        #region Private Methods

        private IQueryable<VulnerabilityStatistics> GetAllVulnerabilities(DashboardRequest dashboardRequest)
        {
            var query = GetAll();

            if (dashboardRequest.ProjectId == 0 &&
                dashboardRequest.ClientId == 0 &&
                dashboardRequest.AccessibleClients != null &&
                dashboardRequest.AccessibleClients.Count > 0)
            {
                query = query.Where(c => dashboardRequest.AccessibleClients.Contains(c.ClientId));
            }
            else if (dashboardRequest.ProjectId > 0)
            {
                query = query.Where(c => c.ProjectId == dashboardRequest.ProjectId);
            }
            else if (dashboardRequest.DivisionId > 0)
            {
                query = query.Where(c => c.DivisionId == dashboardRequest.DivisionId);
            }
            else if (dashboardRequest.ClientId > 0)
            {
                query = query.Where(c => c.ClientId == dashboardRequest.ClientId);
            }

            if (dashboardRequest.ScanType.HasValue && dashboardRequest.ScanType > 0)
            {
                query = query.Where(c => c.ScanTypeId == Convert.ToInt16(dashboardRequest.ScanType));
            }

            if (dashboardRequest.ScanId > 0)
            {
                query = query.Where(c => c.ScanId == dashboardRequest.ScanId);
            }

            if (dashboardRequest.StartDate.HasValue)
            {
                query = query.Where(c => c.ScanDate >= dashboardRequest.StartDate.Value.Date);
            }

            if (dashboardRequest.EndDate.HasValue)
            {
                query = query.Where(c => c.ScanDate <= dashboardRequest.EndDate.Value.Date.AddDays(1));
            }

            return query;
        }

        private Expression<Func<VulnerabilityStatistics, bool>> FilterInvalidIssueTypes()
        {
            return c => !string.IsNullOrWhiteSpace(c.Type)
                && !c.Type.Equals("CODE_SMELL");
        }

        #endregion Private Methods
    }
}
