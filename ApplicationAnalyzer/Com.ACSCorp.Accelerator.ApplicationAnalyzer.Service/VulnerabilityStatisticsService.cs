using Com.ACSCorp.Accelerator.ApplicationAnalyzer.Common;
using Com.ACSCorp.Accelerator.ApplicationAnalyzer.Common.Enum;
using Com.ACSCorp.Accelerator.ApplicationAnalyzer.IRepository;
using Com.ACSCorp.Accelerator.ApplicationAnalyzer.IService;
using Com.ACSCorp.Accelerator.ApplicationAnalyzer.IService.ApiClients;
using Com.ACSCorp.Accelerator.ApplicationAnalyzer.Models;
using Com.ACSCorp.Accelerator.ApplicationAnalyzer.Models.DTO;
using Com.ACSCorp.Accelerator.ApplicationAnalyzer.Validators;
using Com.ACSCorp.Accelerator.Core.Models;

using FluentValidation.Results;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Com.ACSCorp.Accelerator.ApplicationAnalyzer.Service
{
    public class VulnerabilityStatisticsService : IVulnerabilityStatisticsService
    {
        #region Variables

        private readonly IClientService _clientService;
        private readonly IProjectService _projectService;
        private readonly IVulnerabilityStatisticsRepository _vulnerabilityStatisticsRepository;
        private readonly IJobScheduleService _jobScheduleService;
        private readonly ISecurityAnalyzerClient _securityAnalyzerClient;
        private readonly ICodeAnalyzerClient _codeAnalyzerClient;
        private readonly IQueueApiClient _queueApiClient;
        private readonly IUserAccessService _userAccessService;

        #endregion Variables

        #region Constructors

        public VulnerabilityStatisticsService(
            IClientService clientService,
            IProjectService projectService,
            IVulnerabilityStatisticsRepository vulnerabilityStatisticsRepository,
            IJobScheduleService jobScheduleService,
            ISecurityAnalyzerClient securityAnalyzerClient,
            ICodeAnalyzerClient codeAnalyzerClient,
            IQueueApiClient queueApiClient,
            IUserAccessService userAccessService)
        {
            _clientService = clientService;
            _projectService = projectService;
            _vulnerabilityStatisticsRepository = vulnerabilityStatisticsRepository;
            _jobScheduleService = jobScheduleService;
            _securityAnalyzerClient = securityAnalyzerClient;
            _codeAnalyzerClient = codeAnalyzerClient;
            _queueApiClient = queueApiClient;
            _userAccessService = userAccessService;
        }

        #endregion Constructors

        #region Public Methods

        public async Task<Result<bool>> SaveVulnerabilityStatisticsAsync(List<VulnerabilityStatisticsDTO> vulnerabilityStatistics)
        {
            await _vulnerabilityStatisticsRepository.SaveVulnerabilityStatisticsAsync(vulnerabilityStatistics);
            return Result.Ok(true);
        }

        public async Task<Result<List<ListItem<int>>>> GetVulnerabilitiesBySeverityAsync(DashboardRequest dashboardRequest)
        {
            var validationResult = await ValidateDashboardRequestAsync(dashboardRequest);
            if (!validationResult.IsSucceeded)
            {
                return Result.Fail<List<ListItem<int>>>(validationResult.GetErrorString());
            }

            dashboardRequest.AccessibleClients = await GetAllAccessibleClientsAsync();

            List<ListItem<int>> severityCountList = await _vulnerabilityStatisticsRepository.GetVulnerabilitiesBySeverityAsync(dashboardRequest);
            severityCountList = MergeSeverities(severityCountList);

            return Result.Ok(severityCountList);
        }

        public async Task<Result<List<ListItem<int>>>> GetVulnerabilitiesByTypeAsync(DashboardRequest dashboardRequest)
        {
            var validationResult = await ValidateDashboardRequestAsync(dashboardRequest);
            if (!validationResult.IsSucceeded)
            {
                return Result.Fail<List<ListItem<int>>>(validationResult.GetErrorString());
            }

            dashboardRequest.AccessibleClients = await GetAllAccessibleClientsAsync();

            List<ListItem<int>> vulnerabilityList = await _vulnerabilityStatisticsRepository.GetVulnerabilitiesByTypeAsync(dashboardRequest);
            return Result.Ok(vulnerabilityList);
        }

        public async Task<Result<DateTime?>> GetLastScannedOnAsync(DashboardRequest dashboardRequest)
        {
            var validationResult = await ValidateDashboardRequestAsync(dashboardRequest);
            if (!validationResult.IsSucceeded)
            {
                return Result.Fail<DateTime?>(validationResult.GetErrorString());
            }

            dashboardRequest.AccessibleClients = await GetAllAccessibleClientsAsync();

            var lastScannedOn = await _vulnerabilityStatisticsRepository.GetLastScannedOnAsync(dashboardRequest);
            return Result.Ok(lastScannedOn);
        }

        public async Task<Result<List<RecentScanDTO>>> GetRecentScansAsync(DashboardRequest dashboardRequest)
        {
            var validationResult = await ValidateDashboardRequestAsync(dashboardRequest);
            if (!validationResult.IsSucceeded)
            {
                return Result.Fail<List<RecentScanDTO>>(validationResult.GetErrorString());
            }

            dashboardRequest.AccessibleClients = await GetAllAccessibleClientsAsync();

            var recentScanDTOs = await _vulnerabilityStatisticsRepository.GetRecentScansAsync(dashboardRequest);

            List<int> dynamicProjectIds = recentScanDTOs
                .Where(c => c.ScanTypeId == Convert.ToInt16(ScanType.DynamicScan))
                .Select(c => c.ProjectId)
                .Distinct()
                .ToList();

            List<int> staticProjectIds = recentScanDTOs
                .Where(c => c.ScanTypeId == Convert.ToInt16(ScanType.StaticScan))
                .Select(c => c.ProjectId)
                .Distinct()
                .ToList();

            if (dynamicProjectIds.Count > 0)
            {
                List<ListItem<int>> projectList = await _securityAnalyzerClient.GetProjectDynamicScanUrlListAsync(dynamicProjectIds);
                await GetProjectScanDetailsAsync(ScanType.DynamicScan, recentScanDTOs, projectList);
            }

            if (staticProjectIds.Count > 0)
            {
                List<ListItem<int>> projectList = await _codeAnalyzerClient.GetProjectStaticScanUrlListAsync(staticProjectIds);
                await GetProjectScanDetailsAsync(ScanType.StaticScan, recentScanDTOs, projectList);
            }

            return Result.Ok(recentScanDTOs);
        }

        public async Task<Result<ScansSummaryDTO>> GetScansSummary​Async(DashboardRequest dashboardRequest)
        {
            var validationResult = await ValidateDashboardRequestAsync(dashboardRequest);
            if (!validationResult.IsSucceeded)
            {
                return Result.Fail<ScansSummaryDTO>(validationResult.GetErrorString());
            }

            dashboardRequest.AccessibleClients = await GetAllAccessibleClientsAsync();

            var scansSummaryDTO = new ScansSummaryDTO
            {
                ScansCompleted = await _vulnerabilityStatisticsRepository.GetScansCompletedAsync(dashboardRequest)
            };

            Result<int> scansScheduledResult = await _jobScheduleService.GetFutureActiveJobSchedulesCountAsync(dashboardRequest);

            if (scansScheduledResult.IsSucceeded)
            {
                scansSummaryDTO.ScansScheduled = scansScheduledResult.Value;
            }

            scansSummaryDTO.ScansQueued = await _queueApiClient.GetPendingQueueCountAsync();

            var clientsCountTask = PopulateClientsCountAsync(scansSummaryDTO);
            var projectsCountTask = PopulateProjectsCountAsync(scansSummaryDTO);
            
            int? projectId = dashboardRequest.ProjectId > 0 ? dashboardRequest.ProjectId : default(int?);
            var dynamicScansCountTask = PopulateDynamicScansCountAsync(scansSummaryDTO, projectId);
            var staticScansCountTask = PopulateStaticScansCountAsync(scansSummaryDTO, projectId);

            Task.WaitAll(clientsCountTask, projectsCountTask, dynamicScansCountTask, staticScansCountTask);

            return Result.Ok(scansSummaryDTO);
        }

        public async Task<Result<List<VulnerabilityTrendDTO>>> GetVulnerabilityTrendAsync(DashboardRequest dashboardRequest)
        {
            var validationResult = await ValidateDashboardRequestAsync(dashboardRequest);
            if (!validationResult.IsSucceeded)
            {
                return Result.Fail<List<VulnerabilityTrendDTO>>(validationResult.GetErrorString());
            }

            dashboardRequest.AccessibleClients = await GetAllAccessibleClientsAsync();

            var vulnerabilityTrendList = await _vulnerabilityStatisticsRepository.GetVulnerabilityTrendAsync(dashboardRequest);

            foreach (VulnerabilityTrendDTO listItem in vulnerabilityTrendList)
            {
                if (listItem.Severity == Constant.SeverityConstants.BLOCKER || listItem.Severity == Constant.SeverityConstants.CRITICAL)
                {
                    listItem.Severity = Constant.SeverityConstants.HIGH;
                }

                else if (listItem.Severity == Constant.SeverityConstants.MINOR)
                {
                    listItem.Severity = Constant.SeverityConstants.LOW;
                }

                else if (listItem.Severity == Constant.SeverityConstants.MAJOR)
                {
                    listItem.Severity = Constant.SeverityConstants.MEDIUM;
                }
            }

            vulnerabilityTrendList = vulnerabilityTrendList.GroupBy(c => new
            {
                c.Severity,
                c.ScanDate
            })
            .Select(c => new VulnerabilityTrendDTO
            {
                Severity = c.Key.Severity,
                Value = c.Sum(vs => vs.Value),
                ScanDate = c.Key.ScanDate
            })
            .ToList();

            FillVulnerabilityTrendList(dashboardRequest, vulnerabilityTrendList);

            return Result.Ok(vulnerabilityTrendList);
        }

        public async Task<Result<ListResult<ProjectVulnerabilityModel>>> GetMyProjectsWithVulnerabilitiesAsync(DashboardRequest dashboardRequest)
        {
            var projectListRequest = new ProjectListRequest
            {
                ListParameter = dashboardRequest.ListParameter
            };
            var projectsResult = await _projectService.GetAllProjectsAsync(projectListRequest);

            if (!projectsResult.IsSucceeded)
            {
                return Result.Fail<ListResult<ProjectVulnerabilityModel>>(projectsResult.GetErrorString());
            }

            IEnumerable<int> projectIds = projectsResult.Value.Items.Select(c => c.Id);

            var vulnerabilitiesBySeverity = await _vulnerabilityStatisticsRepository.GetVulnerabilitiesBySeverityAsync(dashboardRequest, projectIds);

            var vulnerabilitiesByProject = vulnerabilitiesBySeverity
                .GroupBy(c => c.Id)
                .Select(c => new
                {
                    ProjectId = c.Key,
                    Severities = MergeSeverities(c.Select(c => new ListItem<int>
                    {
                        Text = c.Severity,
                        Value = c.Vulnerabilities
                    }).ToList())
                });

            var result = new ListResult<ProjectVulnerabilityModel>
            {
                Total = projectsResult.Value.Total,
                Items = projectsResult.Value.Items.Select(c => new ProjectVulnerabilityModel
                {
                    Id = c.Id,
                    Name = c.Name,
                    ClientId = c.ClientId ?? default,
                    ClientName = c.ClientName,
                    DivisionId = c.DivisionId,
                    DivisionName = c.DivisionName
                }).ToList()
            };

            foreach (var project in result.Items)
            {
                var projectSeverities = vulnerabilitiesByProject
                    .Where(c => c.ProjectId == project.Id)
                    .SelectMany(c => c.Severities);

                project.High = CalculateTotalCountBySeverity(projectSeverities, Constant.SeverityConstants.HIGH);
                project.Medium = CalculateTotalCountBySeverity(projectSeverities, Constant.SeverityConstants.MEDIUM);
                project.Low = CalculateTotalCountBySeverity(projectSeverities, Constant.SeverityConstants.LOW);
            }

            return Result.Ok(result);
        }

        #endregion Public Methods

        #region Private Methods

        private async Task<Result> ValidateDashboardRequestAsync(DashboardRequest dashboardRequest)
        {
            var dashboardRequestValidator = new DashboardRequestValidator();
            ValidationResult validationResult = await dashboardRequestValidator.ValidateAsync(dashboardRequest);

            if (!validationResult.IsValid)
            {
                return Result.Fail(validationResult.ToString());
            }

            return Result.Ok();
        }

        private async Task<List<int>> GetAllAccessibleClientsAsync()
        {
            return await _userAccessService.GetAllAccessibleClientsAsync();
        }

        private void FillVulnerabilityTrendList(DashboardRequest dashboardRequest, List<VulnerabilityTrendDTO> vulnerabilityTrendList)
        {
            DateTime startDate = DateTime.Now.Date.AddDays(-dashboardRequest.VulnerabilityTrendPeriod);
            DateTime endDate = DateTime.Now.Date;

            for (; startDate < endDate; startDate = startDate.AddDays(1))
            {
                if (!vulnerabilityTrendList.Any(c => c.ScanDate == startDate))
                {
                    vulnerabilityTrendList.Add(new VulnerabilityTrendDTO
                    {
                        ScanDate = startDate,
                        Value = 0,
                        Severity = Constant.SeverityConstants.HIGH
                    });
                    vulnerabilityTrendList.Add(new VulnerabilityTrendDTO
                    {
                        ScanDate = startDate,
                        Value = 0,
                        Severity = Constant.SeverityConstants.MEDIUM
                    });
                    vulnerabilityTrendList.Add(new VulnerabilityTrendDTO
                    {
                        ScanDate = startDate,
                        Value = 0,
                        Severity = Constant.SeverityConstants.LOW
                    });
                }
            }
            vulnerabilityTrendList = vulnerabilityTrendList.OrderBy(c => c.ScanDate).ToList();
        }

        private async Task GetProjectScanDetailsAsync(ScanType scanType, List<RecentScanDTO> recentScanDTOs, List<ListItem<int>> projectList)
        {
            foreach (var scan in recentScanDTOs.Where(c => c.ScanTypeId == Convert.ToInt16(scanType)))
            {
                DashboardRequest dashboardRequest = new DashboardRequest
                {
                    ProjectId = scan.ProjectId,
                    ScanType = scanType,
                    ScanId = scan.ScanId
                };

                scan.Url = projectList?.First(c => c.Value == scan.ProjectId).Text;
                scan.ScanTypeId = Convert.ToInt16(scanType);
                scan.Vulnerabilities = MergeSeverities(await _vulnerabilityStatisticsRepository.GetVulnerabilitiesBySeverityAsync(dashboardRequest));
            }
        }

        private List<ListItem<int>> MergeSeverities(List<ListItem<int>> severityCountList)
        {
            foreach (ListItem<int> listItem in severityCountList)
            {
                switch (listItem.Text)
                {
                    case Constant.SeverityConstants.BLOCKER:
                    case Constant.SeverityConstants.CRITICAL:
                        listItem.Text = Constant.SeverityConstants.HIGH;
                        break;
                    case Constant.SeverityConstants.MAJOR:
                        listItem.Text = Constant.SeverityConstants.MEDIUM;
                        break;
                    case Constant.SeverityConstants.MINOR:
                    case Constant.SeverityConstants.INFORMATIONAL:
                        listItem.Text = Constant.SeverityConstants.LOW;
                        break;
                }
            }

            severityCountList = severityCountList.GroupBy(c => c.Text)
                .Select(c => new ListItem<int>
                {
                    Text = c.Key,
                    Value = c.Sum(vs => vs.Value)
                })
                .ToList();
            return severityCountList;
        }

        private async Task PopulateClientsCountAsync(ScansSummaryDTO scansSummaryDTO)
        {
            var clientsListRequest = new ClientListRequest
            {
                ListParameter = GetMinimalListParameter()
            };
            var clientsResult = await _clientService.GetAllClientsAsync(clientsListRequest);
            if (clientsResult.IsSucceeded)
            {
                scansSummaryDTO.TotalClients = clientsResult.Value.Total;
            }
        }

        private async Task PopulateProjectsCountAsync(ScansSummaryDTO scansSummaryDTO)
        {
            var projectsListRequest = new ProjectListRequest
            {
                ListParameter = GetMinimalListParameter()
            };

            var projectsResult = await _projectService.GetAllProjectsAsync(projectsListRequest);

            if (projectsResult.IsSucceeded)
            {
                scansSummaryDTO.TotalProjects = projectsResult.Value.Total;
            }
        }

        private async Task PopulateStaticScansCountAsync(ScansSummaryDTO scansSummaryDTO, int? projectId)
        {
            ListParameter listParameter = GetMinimalListParameter();

            scansSummaryDTO.TotalStaticScans = await _codeAnalyzerClient.GetStaticScansCountAsync(listParameter, projectId);
        }

        private async Task PopulateDynamicScansCountAsync(ScansSummaryDTO scansSummaryDTO, int? projectId)
        {
            ListParameter listParameter = GetMinimalListParameter();

            scansSummaryDTO.TotalDynamicScans = await _securityAnalyzerClient.GetDynamicScansCountAsync(listParameter, projectId);
        }

        private ListParameter GetMinimalListParameter()
        {
            return new ListParameter
            {
                Pagination = new Pagination
                {
                    PageNumber = 1,
                    PageSize = 1
                }
            };
        }

        private int CalculateTotalCountBySeverity(IEnumerable<ListItem<int>> projectSeverities, string severity)
        {
            return projectSeverities.Where(c => c.Text.Equals(severity))
                .Sum(c => c.Value);
        }

        #endregion Private Methods
    }
}
